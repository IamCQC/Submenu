=begin #=======================================================================

◆◇手帳 RGSS3◇◆

◆DEICIDE ALMA
◆レーネ　
◆http://blog.goo.ne.jp/exa_deicide_alma

★機能/説明
手帳に特定の項目(クエストなど)を追加し、
その項目に対して任意の文章を書くことができます

※クエストの項目作成 ⇒ 進行状況に合わせて文章を追加、変更など
-------------------------------------------------------------------------------
■制御文字(サブテキスト用)  
\\v[n]  \\c[n]  が使用できますが、\\c[n]はその項目全体に適用されます

※一気に描画するため、細かい変更はできません

■制御文字(項目に追加するテキスト用)
\\LC[n] ⇒ この記述がある文章が最後に表示されているときに\C[n]の色で描画
\|      ⇒ 改行(\n は使えません)
他には \\c[n]  \\v[n]  \\n[n]  \\p[n]  \\i[n] が使用できます


※制御文字を使う場合は "\|" 以外は "\" を２つにしてください 
  (\\{ と \\} は一応使えますが、文字を大きくすると切れます)
-------------------------------------------------------------------------------
■イベントコマンドのスクリプト
★com  ⇒ 項目名(文字列)   ※ "項目名" 
★text ⇒ テキスト(文字列) ※ "テキスト"
----------------------------------------------------------------------------
●SceneManager.call(Scene_Notebook)
手帳画面を呼び出し
----------------------------------------------------------------------------
●$game_system.notebook_force_ini
手帳を初期化
----------------------------------------------------------------------------
●$game_system.add_notebook_com(com)
手帳に項目(com)を追加

◆使用例
com = "スライモ討伐" # 追加する項目
$game_system.add_notebook_com(com)
----------------------------------------------------------------------------
●$game_system.add_notebook_text(com, text) ※１つのテキストを追加
作った項目(com)にテキスト(text)を追加します

●$game_system.exc_notebook_text(com, index, text) ※↑のインデックス指定版
書き換えたい場合に使用します(indexは0から始まります)
消したいときは text を nil にしてください 

●$game_system.add_notebook_text_arr(com, arr) ※複数のテキストを追加
作った項目(com)にテキストを一気に追加
arr は配列 ⇒ ["テキスト１", "テキスト２", "テキスト３"] のように指定

※テキスト間は１行空く仕様なので、１行空けずに長いテキストを追加する場合は
　$game_system.add_notebook_textを使用します

◆使用例
com = "スライモ討伐"
text = "★ついにあのスライモを討伐するときが来た"
$game_system.add_notebook_text(com, text)

----------------------------------------------------------------------------
●$game_system.delete_notebook_com(com)
項目(com)を削除します

----------------------------------------------------------------------------
----------------------------------------------------------------------------
★以下は手帳の項目のサブテキストを操作するスクリプト
----------------------------------------------------------------------------
▼$game_system.notebook_r_clear(com)
項目(com)のクリアフラグをオンにします
フラグがオンのとき、コマンドの項目名にクリア用アイコンを描画できます

◆使用例
com = "スライモ討伐"
$game_system.notebook_r_clear(com)
----------------------------------------------------------------------------
▼$game_system.notebook_rt_set(com, sym, text)
項目(com)のサブテキストとしてtextをセットします

sym はシンボル、設定項目の POS[:xxx] = [X,Y,A] の :xxx を記述します
(:xxx はサブテキストの名前だと思うといいかもしれません)

※初期状態では POS[:t1] = [0, 0, 2] となっているので、例１を実行すると
  手帳の右の大きなウィンドウの座標(0,0+24)に "討伐完了" を右寄せで描画します
  (1行目は項目名が描画されるので強制的にY座標を+24して１行分、下に描画します)
  
※設定項目中でサブテキストの座標を設定しておいて、
　ゲーム中でサブテキストをセットすることで、設定した座標に文字列が描画されます

◆例１
com = "スライモ討伐"
sym = :t1
text = "討伐完了"
$game_system.notebook_rt_set(com, sym, text)

◆例２
com = "スライモ討伐"
sym = :t2
text = "獲得ポイント：不明(報告待ち)"
$game_system.notebook_rt_set(com, sym, text)
-------------------------------------------------------------------------------
■注意/補足
●全く同じテキストを２度連続で追加すると不具合が出ることがあります
　(１つのテキストで２回繰り返せば回避可能です)

●文字列は加算や乗算が使用できます
aaa = "abc"  # 任意の文字列を"abc"とします
aaa += "d"   # 加算の結果 ⇒ "abcd"
aaa *= 2     # 乗算の結果 ⇒ "abcdabcd" ※ 上記の加算の後に行ったものとします


◆導入箇所
▼素材のところ、mainより上

=end #=========================================================================
module RENNE ; module NOTEBOOK
  
  # ★メニューコマンド関係の設定
  MENU = false      # メニューにコマンドを追加するかどうか
  INDEX = 7        # メニューのコマンドの位置(インデックスで指定)
  COM = "手帳"     # コマンド名
  
  # ★上のウィンドウ文字列の設定
  LW_STR = "故事章節" # 左上のウィンドウの文字列
  RW_STR = "進行狀況" # 右上のウィンドウの文字列
  
  # ★サブテキストの座標と位置の設定 
  # POS[:xxx] = [X座標, Y座標, 位置] ※位置は 0⇒左揃え 1⇒中央揃え 2⇒右揃え 
  # :xxx はシンボル(わからなければ初期状態のままでOKです) 
  # Y座標が0で２行目からの描画となります(１行目は項目名が描画される)
  # 基本的に１行の高さは 24 です 
  POS = {} # 消さないこと！
  POS[:t1] = [0, 0, 2]   # サブテキスト :t1 の座標と位置
  POS[:t2] = [0, 0, 2]   # サブテキスト :t2 の座標と位置
  
  # ↑の文章で取る行数(スペースを取るだけです、未改造なら１以上)
  ROW = 1
  
  # ★左のウィンドウ(コマンドウィンドウ)の設定
  WIDTH = 250      # ウィンドウの幅
  CLEAR_ICON = 125 # クリアフラグがオンのとき描画するアイコン(いらないなら 0 )
  
  # 設定終了-----------------------------------------------------------------//
  POS.values.each{|a| a[1] += 24}
end ; end

$renne_rgss3 = {} if $renne_rgss3.nil?
$renne_rgss3[:notebook] = true

class Game_System
  #--------------------------------------------------------------------------
  # ● 手帳の項目を取得
  #--------------------------------------------------------------------------
  def notebook
    @notebook ||= {}
  end
  #--------------------------------------------------------------------------
  # ● 手帳のサブ項目のクリアフラグを取得
  #--------------------------------------------------------------------------
  def notebook_r
    @notebook_r ||= {}
  end
  #--------------------------------------------------------------------------
  # ● 手帳を初期化/nilガード
  #--------------------------------------------------------------------------
  def notebook_ini
    notebook
    notebook_r
  end
  #--------------------------------------------------------------------------
  # ● 手帳を強制的に初期化
  #--------------------------------------------------------------------------
  def notebook_force_ini
    @notebook = {}
    @notebook_r = {}
  end
  #--------------------------------------------------------------------------
  # ● 手帳の項目の結果を初期化
  #--------------------------------------------------------------------------
  def notebook_r_ini(com)
    notebook_r
    @notebook_r[com] ||= {}
  end
  #--------------------------------------------------------------------------
  # ● 手帳に項目を追加
  #--------------------------------------------------------------------------
  def add_notebook_com(com)
    notebook_ini
    notebook_r_ini(com)
    @notebook[com] ||= []
  end
  #--------------------------------------------------------------------------
  # ● 手帳の項目を削除
  #--------------------------------------------------------------------------
  def delete_notebook_com(com)
    @notebook.delete(com)
    @notebook_r[com] = {}
  end
  #--------------------------------------------------------------------------
  # ● 手帳の項目に文章を追加
  #--------------------------------------------------------------------------
  def add_notebook_text(com, text)
    add_notebook_com(com)
    @notebook[com] << text.gsub(/[\r\n]+/, "")
  end 
  #--------------------------------------------------------------------------
  # ● 手帳の項目に文章を一気に追加
  #--------------------------------------------------------------------------
  def add_notebook_text_arr(com, arr)
    add_notebook_com(com)
    (0...arr.size).each{|i| arr[i] = arr[i].gsub(/[\r\n]+/, "")}
    @notebook[com] += arr
  end
  #--------------------------------------------------------------------------
  # ● 手帳の項目の文章を書き換え
  #--------------------------------------------------------------------------
  def exc_notebook_text(com, index, text)
    add_notebook_com(com)
    @notebook[com][index] = text
    @notebook[com].compact!
  end
  #--------------------------------------------------------------------------
  # ● 手帳の項目をクリア状態にする
  #--------------------------------------------------------------------------
  def notebook_r_clear(com)
    notebook_r_ini(com)
    @notebook_r[com][:clear] = true
  end
  #--------------------------------------------------------------------------
  # ● 手帳の項目のテキストをセット
  #--------------------------------------------------------------------------
  def notebook_rt_set(com, sym, text)
    notebook_r_ini(com)
    @notebook_r[com][sym] = text if !(sym == :clear) 
  end
end

class Window_MenuCommand < Window_Command
  #--------------------------------------------------------------------------
  # ● コマンドリストの作成(エイリアス)
  #--------------------------------------------------------------------------
  alias notebook_make_command_list make_command_list
  def make_command_list
    notebook_make_command_list
    add_notebook_command 
  end
  #--------------------------------------------------------------------------
  # ● 手帳コマンドの追加
  #--------------------------------------------------------------------------
  def add_notebook_command
    return if !RENNE::NOTEBOOK::MENU
    idx = RENNE::NOTEBOOK::INDEX
    name = RENNE::NOTEBOOK::COM
    @list[idx, 0] = {:name => name, :symbol => :notebook, :enabled => true}
  end
end

class Window_Notebook_Command < Window_Selectable
  #--------------------------------------------------------------------------
  # ● インクルード
  #--------------------------------------------------------------------------
  include RENNE::NOTEBOOK
  #--------------------------------------------------------------------------
  # ● 公開インスタンス変数
  #--------------------------------------------------------------------------
  attr :list
  #--------------------------------------------------------------------------
  # ● オブジェクト初期化
  #--------------------------------------------------------------------------
  def initialize(x, y)
    @note = $game_system.notebook
    @note_r = $game_system.notebook_r
    clear_command_list
    make_command_list
    #super(x, y, WIDTH, window_height)
    super(x, y+70, WIDTH, window_height*3/4)
    refresh
    select(0)
    activate
  end
  #--------------------------------------------------------------------------
  # ● ウィンドウ高さの取得
  #--------------------------------------------------------------------------
  def window_height
    fitting_height(visible_line_number)
  end
  #--------------------------------------------------------------------------
  # ● 表示行数の取得
  #--------------------------------------------------------------------------
  def visible_line_number
    14
  end
  #--------------------------------------------------------------------------
  # ● 項目数の取得
  #--------------------------------------------------------------------------
  def item_max
    @list.size
  end
  #--------------------------------------------------------------------------
  # ● 選択項目の取得
  #--------------------------------------------------------------------------
  def current_item
    @list[index]
  end
  #--------------------------------------------------------------------------
  # ● コマンドリストのクリア
  #--------------------------------------------------------------------------
  def clear_command_list
    @list ||= []
  end
  #--------------------------------------------------------------------------
  # ● コマンドリストの作成
  #--------------------------------------------------------------------------
  def make_command_list
    return if @make_list
    i = CLEAR_ICON
    @note.keys.each do |k|
      com = @note_r[k][:clear] && i > 0 ? "\\I[#{i}]" + k : k
      @list << com
    end
    @make_list = true
  end
  #--------------------------------------------------------------------------
  # ● リフレッシュ
  #--------------------------------------------------------------------------
  def refresh
    clear_command_list
    make_command_list
    create_contents
    super
  end
  #--------------------------------------------------------------------------
  # ● 項目の描画
  #--------------------------------------------------------------------------
  def draw_item(index)
    rect = item_rect_for_text(index)
    draw_text_ex(rect.x, rect.y, @list[index])
  end
  #--------------------------------------------------------------------------
  # ● 選択項目の有効状態を取得
  #--------------------------------------------------------------------------
  def current_item_enabled?
    !(current_item.nil? || current_item.empty?) 
  end
  #--------------------------------------------------------------------------
  # ● 制御文字の事前変換
  #--------------------------------------------------------------------------
  def convert_escape_characters(text)
    text = text.dup
    super(text)
  end
end

class Window_Notebook_Main < Window_Base
  #--------------------------------------------------------------------------
  # ● インクルード
  #--------------------------------------------------------------------------
  include RENNE::NOTEBOOK
  #--------------------------------------------------------------------------
  # ● 公開インスタンス変数
  #--------------------------------------------------------------------------
  attr :pos
  attr_accessor :command_window
  #--------------------------------------------------------------------------
  # ● オブジェクト初期化
  #--------------------------------------------------------------------------
  def initialize(x, y)
    w = Graphics.width - x
    h = Graphics.height - y
    @note = $game_system.notebook
    @note_r = $game_system.notebook_r
    @current = {}
    @ny = (ROW + 1) * 24
    super(x, y+70, w, h*11/15)
    #super(x, y, w, h)
    deactivate
  end
  #--------------------------------------------------------------------------
  # ● ウィンドウ内容の作成
  #--------------------------------------------------------------------------
  def create_contents
    contents.dispose
    self.contents = Bitmap.new(contents_width, 24 * calc_row)
    @max_oy = [contents.height - height + 24, 0].max
  end
  #--------------------------------------------------------------------------
  # ● 行数の計算
  #--------------------------------------------------------------------------
  def calc_row
    return ROW + 1 if !@command_window || !@current[:com]
    arr = @note[current_com]
    num = arr.size * 2 + ROW
    arr.inject(num){|r, str| r + str.scan(/\|/).count}
  end
  #--------------------------------------------------------------------------
  # ● 最後のテキストかどうか
  #--------------------------------------------------------------------------
  def last_text?
    @current[:text] == @note[current_com][-1]
  end
  #--------------------------------------------------------------------------
  # ● 選択している項目を取得
  #--------------------------------------------------------------------------
  def current_com
    @current[:com].sub(/\\I\[(\d+)\]/i, "")
  end
  #--------------------------------------------------------------------------
  # ● 更新
  #--------------------------------------------------------------------------
  def update
    super
    command_window_update
    if active
      cursor_rect.set(0, oy, contents.width, height - 24)
      input_update
    else
      cursor_rect.empty
    end
  end
  #--------------------------------------------------------------------------
  # ● 入力の更新
  #--------------------------------------------------------------------------
  def input_update
    oy_plus(24)  if Input.repeat?(:DOWN) && oy < @max_oy
    oy_plus(-24) if Input.repeat?(:UP) && oy > 0
    if Input.trigger?(:B)
      Sound.play_cancel
      deactivate.command_window.activate   
    end
  end
  #--------------------------------------------------------------------------
  # ● OYのセット
  #--------------------------------------------------------------------------
  def oy_plus(n)
    Sound.play_cursor
    self.oy += n
  end
  #--------------------------------------------------------------------------
  # ● コマンドウィンドウの更新
  #--------------------------------------------------------------------------
  def command_window_update
    return if !@command_window || @command_window.disposed?
    if @command_window.current_item != @current[:com]
      @current[:com] = @command_window.current_item
      refresh(@current[:com])
    end
  end
  #--------------------------------------------------------------------------
  # ● 制御文字つきテキストの描画
  #--------------------------------------------------------------------------
  def refresh(com)
    c = com.sub(/\\I\[(\d+)\]/i, "")
    create_contents
    page_ini
    @result_mode = true
    draw_title(c)
    draw_result(c)
    @result_mode = false
    arr = @note[c]
    arr.each_with_index{|text, i| draw_notebook_text(text, i)}
  end
  #--------------------------------------------------------------------------
  # ● ページの初期化
  #--------------------------------------------------------------------------
  def page_ini
    self.oy = 0
    reset_font_settings
  end
  #--------------------------------------------------------------------------
  # ● タイトルの描画
  #--------------------------------------------------------------------------
  def draw_title(com)
    draw_text(0, 0, contents.width, 24, com, 1)
  end
  #--------------------------------------------------------------------------
  # ● リザルトの描画
  #--------------------------------------------------------------------------
  def draw_result(com)
    r = @note_r[com.sub(/\\I\[(\d+)\]/i, "")]
    k = r.keys - [:clear]
    k.each do |sym|
      p = POS[sym]
      w = contents.width - p[0]
      draw_result_text(p[0], p[1], w, r[sym].to_s, p[2])
    end
  end
  #--------------------------------------------------------------------------
  # ● 手帳へ描画
  #--------------------------------------------------------------------------
  def draw_notebook_text(text, i)
    @pos = {:x => 0, :y => @ny, :new_x => 0, :height => 24} if i == 0
    draw_text_ex(@pos[:x], @pos[:y], text)
    2.times{process_new_line(text)} if !last_text?
  end
  #--------------------------------------------------------------------------
  # ● 手帳のリザルト描画
  #--------------------------------------------------------------------------
  def draw_result_text(x, y, w, text, a)
    reset_font_settings
    t = text.dup
    t.gsub!(/\\V\[(\d+)\]/i){$game_variables[$1.to_i]}
    if t =~ /\\C\[(\d+)\]/i 
      change_color(text_color($1.to_i)) 
      t.gsub!(/\\C\[(\d+)\]/i, "")
    end
    draw_text(x, y, w, 24, t, a)
  end
  #--------------------------------------------------------------------------
  # ● 制御文字つきテキストの描画
  #--------------------------------------------------------------------------
  def draw_text_ex(x, y, text)
    @current[:text] = text.dup
    reset_font_settings
    text = convert_escape_characters(text)
    process_character(text.slice!(0, 1), text, @pos) until text.empty?
  end
  #--------------------------------------------------------------------------
  # ● 制御文字の事前変換
  #--------------------------------------------------------------------------
  def convert_escape_characters(text)
    result = text.dup
    last_text? && result =~ /\\LC\[(\d+)\]/i ?
    result.gsub!(/\\C\[(\d+)\]/i, "") : result.gsub!(/\\LC\[(\d+)\]/i, "")
    result = super(result)
    result.gsub!(/\|/i,"\n")
    result
  end
  #--------------------------------------------------------------------------
  # ● 制御文字の処理
  #--------------------------------------------------------------------------
  def process_escape_character(code, text, pos)
    return if !code
    super(code, text, pos)
    case code.upcase
    when "LC" 
      change_color(text_color(obtain_escape_param(text)))
    end
  end
  #--------------------------------------------------------------------------
  # ● 改行文字の処理
  #--------------------------------------------------------------------------
  def process_new_line(text, pos = nil)
    @pos[:x] = @pos[:new_x]
    @pos[:y] += 24
    @pos[:height] = 24
  end
end

class Window_Notebook_Sub < Window_Base
  #--------------------------------------------------------------------------
  # ● インクルード
  #--------------------------------------------------------------------------
  include RENNE::NOTEBOOK
  #--------------------------------------------------------------------------
  # ● オブジェクト初期化
  #--------------------------------------------------------------------------
  def initialize(x, c)
    case c
    when 1 ; text = LW_STR ; w = WIDTH
    when 2 ; text = RW_STR ; w = Graphics.width - WIDTH
    end
    #super(x, 0, w, 24 + 12 * 2 + 8)
    super(x, 70, w, 24 + 12 * 2 + 8)
    draw_text(0, 4, contents.width, 24, text, 1)
  end
end

class Scene_Menu < Scene_MenuBase
  #--------------------------------------------------------------------------
  # ● コマンドウィンドウの作成(エイリアス)
  #--------------------------------------------------------------------------
  alias notebook_create_command_window create_command_window
  def create_command_window
    notebook_create_command_window
    @command_window.set_handler(:notebook, method(:command_notebook))
  end
  #--------------------------------------------------------------------------
  # ● コマンド [手帳]
  #--------------------------------------------------------------------------
  def command_notebook
    SceneManager.call(Scene_Notebook)
  end
end

class Scene_Notebook < Scene_MenuBase
  #--------------------------------------------------------------------------
  # ● 開始処理
  #--------------------------------------------------------------------------
  def start
    super
    @header_sprite.set_menu(:story2)
    @header_sprite.refresh
    create_all_windows
  end
  #--------------------------------------------------------------------------
  # ● 全ウィンドウの作成
  #--------------------------------------------------------------------------
  def create_all_windows
    create_sub_window
    create_command_window
    create_main_window
  end
  #--------------------------------------------------------------------------
  # ● サブウィンドウの作成
  #--------------------------------------------------------------------------
  def create_sub_window
    @sub_window1 = Window_Notebook_Sub.new(0, 1)
    @sub_window2 = Window_Notebook_Sub.new(@sub_window1.width, 2)
  end
  #--------------------------------------------------------------------------
  # ● コマンドウィンドウの作成
  #--------------------------------------------------------------------------
  def create_command_window
    @command_window = Window_Notebook_Command.new(0, @sub_window1.height)
    @command_window.set_handler(:ok, method(:main_window_active))
    @command_window.set_handler(:cancel, method(:return_scene))
  end
  #--------------------------------------------------------------------------
  # ● メインウィンドウの作成
  #--------------------------------------------------------------------------
  def create_main_window
    ax = @command_window.width
    ay = @sub_window2.height
    @main_window = Window_Notebook_Main.new(ax, ay)
    @main_window.command_window = @command_window
  end
  #--------------------------------------------------------------------------
  # ● メインウィンドウの作成
  #--------------------------------------------------------------------------
  def main_window_active
    @main_window.activate
  end
end
