module SubmenuCommand
  Submenu_Vocab = "Character"
end

class Window_MenuCommand < Window_Command
  #--------------------------------------------------------------------------
  # * Add Main Commands to List
  #--------------------------------------------------------------------------
  def add_main_commands
    #add_command(Vocab::item,   :item,   main_commands_enabled)
    add_command(SubmenuCommand::Submenu_Vocab,   :character,   main_commands_enabled)
  end
end


class Window_SubCommand < Window_Command
  attr_accessor :last_command_symbol
  #--------------------------------------------------------------------------
  # * Object Initialization
  #--------------------------------------------------------------------------
  def initialize
    super(0, 0)
    select_last
    @last_command_symbol = nil
  end
  #--------------------------------------------------------------------------
  # * Get Window Width
  #--------------------------------------------------------------------------
  def window_width
    return 160
  end
  #--------------------------------------------------------------------------
  # * Get Number of Lines to Show
  #--------------------------------------------------------------------------
  def visible_line_number
    item_max
  end
  #--------------------------------------------------------------------------
  # * Create Command List
  #--------------------------------------------------------------------------
  def make_command_list
    add_main_commands
  end
  #--------------------------------------------------------------------------
  # * Add Main Commands to List
  #--------------------------------------------------------------------------
  def add_main_commands
    add_command(Vocab::skill,  :skill,  main_commands_enabled)
    add_command(Vocab::equip,  :equip,  main_commands_enabled)
    add_command(Vocab::status, :status, main_commands_enabled)
  end
  #--------------------------------------------------------------------------
  # * Get Activation State of Main Commands
  #--------------------------------------------------------------------------
  def main_commands_enabled
    $game_party.exists
  end
  #--------------------------------------------------------------------------
  # * Processing When OK Button Is Pressed
  #--------------------------------------------------------------------------
  def process_ok
    @last_command_symbol = current_symbol
    super
  end
  #--------------------------------------------------------------------------
  # * Restore Previous Selection Position
  #--------------------------------------------------------------------------
  def select_last
    select_symbol(@last_command_symbol)
  end
end

class Scene_Equip < Scene_MenuBase
  
  def return_scene
    SceneManager.call(Scene_Menu)
  end
  
end

class Scene_Skill < Scene_ItemBase
  
  def return_scene
    SceneManager.call(Scene_Menu)
  end  
  
end


class Scene_Status < Scene_MenuBase
  def return_scene
    SceneManager.call(Scene_Menu)
  end
end


class Scene_Menu < Scene_MenuBase
   def return_scene
     SceneManager.goto(Scene_Map)
   end
end
 


class Scene_Menu < Scene_MenuBase
  #--------------------------------------------------------------------------
  # * Create Command Window
  #--------------------------------------------------------------------------
  def create_command_window
    @command_window = Window_MenuCommand.new
    @command_window.set_handler(:item,      method(:command_item))
    @command_window.set_handler(:character,      method(:command_personal_sub))
    @command_window.set_handler(:formation, method(:command_formation))
    @command_window.set_handler(:save,      method(:command_save))
    @command_window.set_handler(:game_end,  method(:command_game_end))
    @command_window.set_handler(:cancel,    method(:return_scene))
  end  
  
  def command_character
    @command_window.close
    start_submenu_command
  end
  
  #--------------------------------------------------------------------------
  # * [Skill], [Equipment] and [Status] Commands
  #--------------------------------------------------------------------------
  def command_personal_sub
    @status_window.select_last
    @status_window.activate
    @status_window.set_handler(:ok,     method(:on_personal_sub_ok))
    @status_window.set_handler(:cancel, method(:on_personal_cancel))
  end  
  
  #--------------------------------------------------------------------------
  # * [OK] Personal Command
  #--------------------------------------------------------------------------
  def on_personal_sub_ok
    @command_window.close
    start_submenu_command
  end  
  
  #--------------------------------------------------------------------------
  # * Create Command Window
  #--------------------------------------------------------------------------
  def start_submenu_command
    @sub_window = Window_SubCommand.new
    @sub_window.set_handler(:skill,     method(:command_personal2))
    @sub_window.set_handler(:equip,     method(:command_personal2))
    @sub_window.set_handler(:status,    method(:command_personal2))
    @sub_window.set_handler(:cancel,    method(:return_scene2))
  end
  
  def return_scene2
    SceneManager.return
  end
  
  #--------------------------------------------------------------------------
  # * [Skill], [Equipment] and [Status] Commands
  #--------------------------------------------------------------------------
  def command_personal2
    @status_window.select_last
    @status_window.activate
    @status_window.set_handler(:ok,     method(:on_personal_ok2))
    @status_window.set_handler(:cancel, method(:on_personal_cancel2))
  end  
  
  #--------------------------------------------------------------------------
  # * [OK] Personal Command
  #--------------------------------------------------------------------------
  def on_personal_ok2
    SceneManager.call(Scene_Skill) if :skill
    SceneManager.call(Scene_Equip) if :equip
    SceneManager.call(Scene_Status) if :status
  end  
  
  #--------------------------------------------------------------------------
  # * [Cancel] Personal Command
  #--------------------------------------------------------------------------
  def on_personal_cancel2
    @status_window.unselect
    @sub_window.close
    @command_window.open
    @command_window.activate
  end
  
end
 
